<?php declare(strict_types=1);

namespace App\Filament\Resources;

use App\Filament\Resources\BotCommandResource\Pages;
use App\Models\BotCommand;
use App\Repositories\BotRepository;
use Filament\Forms;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;

class BotCommandResource extends Resource
{
    protected static ?string $model = BotCommand::class;

    protected static bool $shouldRegisterNavigation = false;

    public static function checkAuth(?int $bot_id = null): void
    {
        if (empty($bot_id))
            abort(404);

        $botId = (int)request('bot_id', $bot_id);

        $bot = BotRepository::make()
            ->isOwner($botId);

        if (!$bot)
            abort(404);
    }

    public static function form(Form $form): Form
    {
        static::checkAuth($form->model->bot_id);

        return $form
            ->schema([
                Forms\Components\TextInput::make('bot_id')
                    ->visible(false)
                    ->default(request('bot_id')),
                MarkdownEditor::make('description')
                    ->label(__('Descrição'))
                    ->columnSpanFull()
                    ->toolbarButtons([
                        'bold',          // <b>bold</b>, <strong>bold</strong>, **bold**
                        'italic',        // <i>italic</i>, <em>italic</em>, *italic*
                        'codeBlock',     // <code>code</code>, `code`
                        'strike',        // <s>strike</s>, <strike>strike</strike>, <del>strike</del>, ~~strike~~
                        'underline',     // <u>underline</u>
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        static::checkAuth((int)request('bot_id'));

        return $table
            ->modifyQueryUsing(fn($query) => $query->whereHas('command', function ($q) {
                $q->whereNotIn('name', [
                    'setup_group',
                    'how_to_setup_group',
                    'iam'
                ]);
            })->where('bot_id', request('bot_id')))
            ->columns([
                Tables\Columns\TextColumn::make('command.name')
                    ->label(__('Comando'))
                    ->searchable(),
                Tables\Columns\IconColumn::make('command.default')
                    ->label(__('Padrão'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.all_private_chats')
                    ->label(__('Chat privados'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.all_group_chats')
                    ->label(__('Grupos'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.all_chat_administrators')
                    ->label(__('Chat com Administradores'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.chat')
                    ->label(__('Chat com clientes'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.chat_administrators')
                    ->label(__('Admins'))
                    ->boolean(),
                Tables\Columns\IconColumn::make('command.chat_member')
                    ->label(__('Membros'))
                    ->boolean()
            ])
            ->actions([
                Tables\Actions\EditAction::make()
                    ->url(fn($record) => BotCommandResource::getUrl('edit', ['record' => $record->id, 'bot_id' => request('bot_id')])),
            ]);
    }

    public static function canEdit(Model $record): bool
    {
        return parent::canEdit($record); // TODO: Change the autogenerated stub
    }

    public static function canCreate(): bool
    {
        return false;
    }

    public static function canDelete(Model $record): bool
    {
        return false;
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListBotCommands::route('/'),
            'edit' => Pages\EditBotCommand::route('/{record}/edit'),
        ];
    }
}

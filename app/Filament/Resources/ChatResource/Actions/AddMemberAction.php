<?php declare(strict_types=1);

namespace App\Filament\Resources\ChatResource\Actions;

use App\Repositories\BotChatRepository;
use App\Services\Messengers\Telegram\ChatTelegramManager;
use Closure;
use Filament\Actions\Concerns\CanCustomizeProcess;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Select;
use Filament\Notifications\Notification;
use Filament\Support\Enums\IconPosition;
use Filament\Tables\Actions\Action;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\HtmlString;

class AddMemberAction extends Action
{

    use CanCustomizeProcess;

    protected string | Htmlable | Closure | null $label = 'Adicionar Tempo';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $dayInSeconds = 86400;

        $this
            ->hidden(fn($record) => !$record->is_expired)
            ->iconPosition(IconPosition::Before)
            ->icon('heroicon-o-clock')
            ->color('success')
            ->modal()
            ->form([
                Select::make('duration_time')
                    ->label(__('Tempo de duração'))
                    ->required()
                    ->helperText(__('Esse campo define quanto tempo o usuário terá acesso ao produto'))
                    ->default(0)
                    ->options([
                        0 => __('Aquisição única'),
                        $dayInSeconds => __('1 dia'),
                        $dayInSeconds * 7 => __('1 Semana'),
                        $dayInSeconds * 15 => __('15 dias'),
                        $dayInSeconds * 30 => __('1 Mês'),
                        $dayInSeconds * 365 => __('1 Ano'),
                    ]),

                MarkdownEditor::make('description')
                    ->toolbarButtons([
                        'bold',          // <b>bold</b>, <strong>bold</strong>, **bold**
                        'italic',        // <i>italic</i>, <em>italic</em>, *italic*
                        'codeBlock',     // <code>code</code>, `code`
                        'strike',        // <s>strike</s>, <strike>strike</strike>, <del>strike</del>, ~~strike~~
                        'underline',     // <u>underline</u>
                    ])
                    ->label(new HtmlString(__('Você pode enviar um texto customizado (<strong style="color: #1e40af">opcional</strong>)')))
                    ->nullable()
            ]);

        $this->action(function (): void {
            $this->process(function (array $data, Model $record) {

                $dataDurationTime = (int)$data['duration_time'];

                if ($dataDurationTime === 0) {
                    $durationTime = today()->clone()->addYears(5);
                } else {
                    $durationTime = today()->clone()->addSeconds($dataDurationTime);
                }

                $record->expired_at = $durationTime;
                $record->save();

                $result = BotChatRepository::make()
                    ->getChatAndBot((int)$record->chat_id);

                $chatTelegramManager = ChatTelegramManager::make()
                    ->setBot($result['bot'])
                    ->setChat($result['chat']);

                $notification = Notification::make();

                $result = $chatTelegramManager->addMember([
                    'user_id' => $record->member->code,
                    'text' => $data['text'] ?? null
                ]);

                if (!$result) {
                    $notification->danger()
                        ->body(__('Não foi possível adicionar o membro no grupo'));
                } else {
                    $notification->success()
                        ->body(__('Membro adicionado no grupo com sucesso'));
                }

                $notification->send();
            });
        });
    }

    public static function getDefaultName(): ?string
    {
        return 'add_member';
    }

}
